// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ups_amazon.proto

#include "ups_amazon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ups_5famazon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ups_5famazon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AUQueryUpsid;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ups_5famazon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Err;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ups_5famazon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UAArrived;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ups_5famazon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UADeliverOver;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ups_5famazon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UASendWorldId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ups_5famazon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Warehouse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ups_5famazon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AULoadOver;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ups_5famazon_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AURequestPickup;
}  // namespace protobuf_ups_5famazon_2eproto
namespace protobuf_world_5famazon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_world_5famazon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AProduct;
}  // namespace protobuf_world_5famazon_2eproto
namespace protobuf_world_5fups_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_world_5fups_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UDeliveryLocation;
}  // namespace protobuf_world_5fups_2eproto
class UASendWorldIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UASendWorldId>
      _instance;
} _UASendWorldId_default_instance_;
class AUQueryUpsidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AUQueryUpsid>
      _instance;
} _AUQueryUpsid_default_instance_;
class WarehouseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Warehouse>
      _instance;
} _Warehouse_default_instance_;
class AURequestPickupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AURequestPickup>
      _instance;
} _AURequestPickup_default_instance_;
class UAArrivedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UAArrived>
      _instance;
} _UAArrived_default_instance_;
class AULoadOverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AULoadOver>
      _instance;
} _AULoadOver_default_instance_;
class UADeliverOverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UADeliverOver>
      _instance;
} _UADeliverOver_default_instance_;
class AUCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AUCommand>
      _instance;
} _AUCommand_default_instance_;
class UACommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UACommand>
      _instance;
} _UACommand_default_instance_;
class ErrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Err>
      _instance;
} _Err_default_instance_;
namespace protobuf_ups_5famazon_2eproto {
static void InitDefaultsUASendWorldId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UASendWorldId_default_instance_;
    new (ptr) ::UASendWorldId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UASendWorldId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UASendWorldId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUASendWorldId}, {}};

static void InitDefaultsAUQueryUpsid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AUQueryUpsid_default_instance_;
    new (ptr) ::AUQueryUpsid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AUQueryUpsid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AUQueryUpsid =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAUQueryUpsid}, {}};

static void InitDefaultsWarehouse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Warehouse_default_instance_;
    new (ptr) ::Warehouse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Warehouse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Warehouse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWarehouse}, {}};

static void InitDefaultsAURequestPickup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AURequestPickup_default_instance_;
    new (ptr) ::AURequestPickup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AURequestPickup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AURequestPickup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAURequestPickup}, {
      &protobuf_world_5famazon_2eproto::scc_info_AProduct.base,
      &protobuf_ups_5famazon_2eproto::scc_info_Warehouse.base,}};

static void InitDefaultsUAArrived() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UAArrived_default_instance_;
    new (ptr) ::UAArrived();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UAArrived::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UAArrived =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUAArrived}, {}};

static void InitDefaultsAULoadOver() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AULoadOver_default_instance_;
    new (ptr) ::AULoadOver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AULoadOver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AULoadOver =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAULoadOver}, {
      &protobuf_world_5fups_2eproto::scc_info_UDeliveryLocation.base,}};

static void InitDefaultsUADeliverOver() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UADeliverOver_default_instance_;
    new (ptr) ::UADeliverOver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UADeliverOver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UADeliverOver =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUADeliverOver}, {}};

static void InitDefaultsAUCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AUCommand_default_instance_;
    new (ptr) ::AUCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AUCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_AUCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsAUCommand}, {
      &protobuf_ups_5famazon_2eproto::scc_info_AURequestPickup.base,
      &protobuf_ups_5famazon_2eproto::scc_info_AULoadOver.base,
      &protobuf_ups_5famazon_2eproto::scc_info_AUQueryUpsid.base,
      &protobuf_ups_5famazon_2eproto::scc_info_Err.base,}};

static void InitDefaultsUACommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UACommand_default_instance_;
    new (ptr) ::UACommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UACommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_UACommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsUACommand}, {
      &protobuf_ups_5famazon_2eproto::scc_info_UASendWorldId.base,
      &protobuf_ups_5famazon_2eproto::scc_info_UAArrived.base,
      &protobuf_ups_5famazon_2eproto::scc_info_UADeliverOver.base,
      &protobuf_ups_5famazon_2eproto::scc_info_Err.base,}};

static void InitDefaultsErr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Err_default_instance_;
    new (ptr) ::Err();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Err::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Err =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsErr}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UASendWorldId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AUQueryUpsid.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Warehouse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AURequestPickup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UAArrived.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AULoadOver.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UADeliverOver.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AUCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UACommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Err.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UASendWorldId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UASendWorldId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UASendWorldId, worldid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UASendWorldId, seqnum_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUQueryUpsid, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUQueryUpsid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUQueryUpsid, upsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUQueryUpsid, seqnum_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Warehouse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Warehouse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Warehouse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Warehouse, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Warehouse, y_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AURequestPickup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AURequestPickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AURequestPickup, things_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AURequestPickup, wareinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AURequestPickup, trackingnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AURequestPickup, upsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AURequestPickup, seqnum_),
  ~0u,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UAArrived, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UAArrived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UAArrived, truckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UAArrived, trackingnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UAArrived, seqnum_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AULoadOver, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AULoadOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AULoadOver, trackingnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AULoadOver, truckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AULoadOver, loc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AULoadOver, seqnum_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UADeliverOver, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UADeliverOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UADeliverOver, trackingnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UADeliverOver, seqnum_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUCommand, pickup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUCommand, packloaded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUCommand, queryupsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUCommand, errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUCommand, acks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AUCommand, seqnum_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UACommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UACommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UACommand, sendid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UACommand, arrived_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UACommand, deliverover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UACommand, errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UACommand, acks_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Err, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Err, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Err, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Err, originseqnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Err, seqnum_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::UASendWorldId)},
  { 9, 16, sizeof(::AUQueryUpsid)},
  { 18, 26, sizeof(::Warehouse)},
  { 29, 39, sizeof(::AURequestPickup)},
  { 44, 52, sizeof(::UAArrived)},
  { 55, 64, sizeof(::AULoadOver)},
  { 68, 75, sizeof(::UADeliverOver)},
  { 77, 88, sizeof(::AUCommand)},
  { 94, 104, sizeof(::UACommand)},
  { 109, 117, sizeof(::Err)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UASendWorldId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AUQueryUpsid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Warehouse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AURequestPickup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UAArrived_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AULoadOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UADeliverOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AUCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UACommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Err_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ups_amazon.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020ups_amazon.proto\032\022world_amazon.proto\032\017"
      "world_ups.proto\"1\n\rUASendWorldId\022\017\n\007worl"
      "did\030\001 \002(\003\022\017\n\006seqnum\030\377\001 \002(\003\".\n\014AUQueryUps"
      "id\022\r\n\005upsid\030\001 \002(\003\022\017\n\006seqnum\030\377\001 \002(\003\"-\n\tWa"
      "rehouse\022\n\n\002id\030\001 \002(\005\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002("
      "\005\"\177\n\017AURequestPickup\022\031\n\006things\030\001 \003(\0132\t.A"
      "Product\022\034\n\010wareinfo\030\002 \002(\0132\n.Warehouse\022\023\n"
      "\013trackingnum\030\003 \002(\003\022\r\n\005upsid\030\004 \001(\003\022\017\n\006seq"
      "num\030\377\001 \002(\003\"B\n\tUAArrived\022\017\n\007truckid\030\001 \002(\005"
      "\022\023\n\013trackingnum\030\002 \002(\003\022\017\n\006seqnum\030\377\001 \002(\003\"d"
      "\n\nAULoadOver\022\023\n\013trackingnum\030\001 \002(\003\022\017\n\007tru"
      "ckid\030\002 \002(\005\022\037\n\003loc\030\003 \002(\0132\022.UDeliveryLocat"
      "ion\022\017\n\006seqnum\030\377\001 \002(\003\"5\n\rUADeliverOver\022\023\n"
      "\013trackingnum\030\001 \002(\003\022\017\n\006seqnum\030\377\001 \002(\003\"\246\001\n\t"
      "AUCommand\022 \n\006pickup\030\001 \003(\0132\020.AURequestPic"
      "kup\022\037\n\npackloaded\030\002 \003(\0132\013.AULoadOver\022!\n\n"
      "queryupsid\030\003 \001(\0132\r.AUQueryUpsid\022\024\n\006error"
      "s\030\004 \003(\0132\004.Err\022\014\n\004acks\030\005 \003(\003\022\017\n\006seqnum\030\377\001"
      " \001(\003\"\221\001\n\tUACommand\022\036\n\006sendid\030\001 \001(\0132\016.UAS"
      "endWorldId\022\033\n\007arrived\030\002 \003(\0132\n.UAArrived\022"
      "#\n\013deliverover\030\003 \003(\0132\016.UADeliverOver\022\024\n\006"
      "errors\030\004 \003(\0132\004.Err\022\014\n\004acks\030\005 \003(\003\"9\n\003Err\022"
      "\013\n\003err\030\001 \002(\t\022\024\n\014originseqnum\030\002 \002(\003\022\017\n\006se"
      "qnum\030\377\001 \002(\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 931);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ups_amazon.proto", &protobuf_RegisterTypes);
  ::protobuf_world_5famazon_2eproto::AddDescriptors();
  ::protobuf_world_5fups_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ups_5famazon_2eproto

// ===================================================================

void UASendWorldId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UASendWorldId::kWorldidFieldNumber;
const int UASendWorldId::kSeqnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UASendWorldId::UASendWorldId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_UASendWorldId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UASendWorldId)
}
UASendWorldId::UASendWorldId(const UASendWorldId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&worldid_, &from.worldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&worldid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UASendWorldId)
}

void UASendWorldId::SharedCtor() {
  ::memset(&worldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&worldid_)) + sizeof(seqnum_));
}

UASendWorldId::~UASendWorldId() {
  // @@protoc_insertion_point(destructor:UASendWorldId)
  SharedDtor();
}

void UASendWorldId::SharedDtor() {
}

void UASendWorldId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UASendWorldId::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UASendWorldId& UASendWorldId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_UASendWorldId.base);
  return *internal_default_instance();
}


void UASendWorldId::Clear() {
// @@protoc_insertion_point(message_clear_start:UASendWorldId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&worldid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&worldid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UASendWorldId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UASendWorldId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 worldid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_worldid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worldid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 seqnum = 255;
      case 255: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 2040 & 0xFF */)) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UASendWorldId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UASendWorldId)
  return false;
#undef DO_
}

void UASendWorldId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UASendWorldId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->worldid(), output);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(255, this->seqnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UASendWorldId)
}

::google::protobuf::uint8* UASendWorldId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UASendWorldId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->worldid(), target);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(255, this->seqnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UASendWorldId)
  return target;
}

size_t UASendWorldId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UASendWorldId)
  size_t total_size = 0;

  if (has_worldid()) {
    // required int64 worldid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worldid());
  }

  if (has_seqnum()) {
    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());
  }

  return total_size;
}
size_t UASendWorldId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UASendWorldId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 worldid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->worldid());

    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UASendWorldId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UASendWorldId)
  GOOGLE_DCHECK_NE(&from, this);
  const UASendWorldId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UASendWorldId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UASendWorldId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UASendWorldId)
    MergeFrom(*source);
  }
}

void UASendWorldId::MergeFrom(const UASendWorldId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UASendWorldId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      worldid_ = from.worldid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UASendWorldId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UASendWorldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UASendWorldId::CopyFrom(const UASendWorldId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UASendWorldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UASendWorldId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UASendWorldId::Swap(UASendWorldId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UASendWorldId::InternalSwap(UASendWorldId* other) {
  using std::swap;
  swap(worldid_, other->worldid_);
  swap(seqnum_, other->seqnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UASendWorldId::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AUQueryUpsid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AUQueryUpsid::kUpsidFieldNumber;
const int AUQueryUpsid::kSeqnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AUQueryUpsid::AUQueryUpsid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_AUQueryUpsid.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AUQueryUpsid)
}
AUQueryUpsid::AUQueryUpsid(const AUQueryUpsid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upsid_, &from.upsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&upsid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AUQueryUpsid)
}

void AUQueryUpsid::SharedCtor() {
  ::memset(&upsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&upsid_)) + sizeof(seqnum_));
}

AUQueryUpsid::~AUQueryUpsid() {
  // @@protoc_insertion_point(destructor:AUQueryUpsid)
  SharedDtor();
}

void AUQueryUpsid::SharedDtor() {
}

void AUQueryUpsid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AUQueryUpsid::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AUQueryUpsid& AUQueryUpsid::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_AUQueryUpsid.base);
  return *internal_default_instance();
}


void AUQueryUpsid::Clear() {
// @@protoc_insertion_point(message_clear_start:AUQueryUpsid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&upsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&upsid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AUQueryUpsid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AUQueryUpsid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 upsid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_upsid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 seqnum = 255;
      case 255: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 2040 & 0xFF */)) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AUQueryUpsid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AUQueryUpsid)
  return false;
#undef DO_
}

void AUQueryUpsid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AUQueryUpsid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 upsid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->upsid(), output);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(255, this->seqnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AUQueryUpsid)
}

::google::protobuf::uint8* AUQueryUpsid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AUQueryUpsid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 upsid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->upsid(), target);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(255, this->seqnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUQueryUpsid)
  return target;
}

size_t AUQueryUpsid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUQueryUpsid)
  size_t total_size = 0;

  if (has_upsid()) {
    // required int64 upsid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->upsid());
  }

  if (has_seqnum()) {
    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());
  }

  return total_size;
}
size_t AUQueryUpsid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUQueryUpsid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 upsid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->upsid());

    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AUQueryUpsid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AUQueryUpsid)
  GOOGLE_DCHECK_NE(&from, this);
  const AUQueryUpsid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AUQueryUpsid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AUQueryUpsid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AUQueryUpsid)
    MergeFrom(*source);
  }
}

void AUQueryUpsid::MergeFrom(const AUQueryUpsid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUQueryUpsid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      upsid_ = from.upsid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AUQueryUpsid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AUQueryUpsid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AUQueryUpsid::CopyFrom(const AUQueryUpsid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUQueryUpsid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUQueryUpsid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AUQueryUpsid::Swap(AUQueryUpsid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AUQueryUpsid::InternalSwap(AUQueryUpsid* other) {
  using std::swap;
  swap(upsid_, other->upsid_);
  swap(seqnum_, other->seqnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AUQueryUpsid::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Warehouse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Warehouse::kIdFieldNumber;
const int Warehouse::kXFieldNumber;
const int Warehouse::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Warehouse::Warehouse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_Warehouse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Warehouse)
}
Warehouse::Warehouse(const Warehouse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Warehouse)
}

void Warehouse::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(y_));
}

Warehouse::~Warehouse() {
  // @@protoc_insertion_point(destructor:Warehouse)
  SharedDtor();
}

void Warehouse::SharedDtor() {
}

void Warehouse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Warehouse::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Warehouse& Warehouse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_Warehouse.base);
  return *internal_default_instance();
}


void Warehouse::Clear() {
// @@protoc_insertion_point(message_clear_start:Warehouse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&id_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Warehouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Warehouse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Warehouse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Warehouse)
  return false;
#undef DO_
}

void Warehouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Warehouse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Warehouse)
}

::google::protobuf::uint8* Warehouse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Warehouse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Warehouse)
  return target;
}

size_t Warehouse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Warehouse)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t Warehouse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Warehouse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Warehouse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Warehouse)
  GOOGLE_DCHECK_NE(&from, this);
  const Warehouse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Warehouse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Warehouse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Warehouse)
    MergeFrom(*source);
  }
}

void Warehouse::MergeFrom(const Warehouse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Warehouse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Warehouse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Warehouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Warehouse::CopyFrom(const Warehouse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Warehouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Warehouse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Warehouse::Swap(Warehouse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Warehouse::InternalSwap(Warehouse* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Warehouse::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AURequestPickup::InitAsDefaultInstance() {
  ::_AURequestPickup_default_instance_._instance.get_mutable()->wareinfo_ = const_cast< ::Warehouse*>(
      ::Warehouse::internal_default_instance());
}
void AURequestPickup::clear_things() {
  things_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AURequestPickup::kThingsFieldNumber;
const int AURequestPickup::kWareinfoFieldNumber;
const int AURequestPickup::kTrackingnumFieldNumber;
const int AURequestPickup::kUpsidFieldNumber;
const int AURequestPickup::kSeqnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AURequestPickup::AURequestPickup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_AURequestPickup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AURequestPickup)
}
AURequestPickup::AURequestPickup(const AURequestPickup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      things_(from.things_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_wareinfo()) {
    wareinfo_ = new ::Warehouse(*from.wareinfo_);
  } else {
    wareinfo_ = NULL;
  }
  ::memcpy(&trackingnum_, &from.trackingnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AURequestPickup)
}

void AURequestPickup::SharedCtor() {
  ::memset(&wareinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&wareinfo_)) + sizeof(seqnum_));
}

AURequestPickup::~AURequestPickup() {
  // @@protoc_insertion_point(destructor:AURequestPickup)
  SharedDtor();
}

void AURequestPickup::SharedDtor() {
  if (this != internal_default_instance()) delete wareinfo_;
}

void AURequestPickup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AURequestPickup::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AURequestPickup& AURequestPickup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_AURequestPickup.base);
  return *internal_default_instance();
}


void AURequestPickup::Clear() {
// @@protoc_insertion_point(message_clear_start:AURequestPickup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  things_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(wareinfo_ != NULL);
    wareinfo_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&trackingnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AURequestPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AURequestPickup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AProduct things = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_things()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Warehouse wareinfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wareinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 trackingnum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_trackingnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trackingnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 upsid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_upsid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 seqnum = 255;
      case 255: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 2040 & 0xFF */)) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AURequestPickup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AURequestPickup)
  return false;
#undef DO_
}

void AURequestPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AURequestPickup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AProduct things = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->things_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->things(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required .Warehouse wareinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_wareinfo(), output);
  }

  // required int64 trackingnum = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->trackingnum(), output);
  }

  // optional int64 upsid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->upsid(), output);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(255, this->seqnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AURequestPickup)
}

::google::protobuf::uint8* AURequestPickup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AURequestPickup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AProduct things = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->things_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->things(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required .Warehouse wareinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_wareinfo(), deterministic, target);
  }

  // required int64 trackingnum = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->trackingnum(), target);
  }

  // optional int64 upsid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->upsid(), target);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(255, this->seqnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AURequestPickup)
  return target;
}

size_t AURequestPickup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AURequestPickup)
  size_t total_size = 0;

  if (has_wareinfo()) {
    // required .Warehouse wareinfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wareinfo_);
  }

  if (has_trackingnum()) {
    // required int64 trackingnum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trackingnum());
  }

  if (has_seqnum()) {
    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());
  }

  return total_size;
}
size_t AURequestPickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AURequestPickup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .Warehouse wareinfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wareinfo_);

    // required int64 trackingnum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trackingnum());

    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AProduct things = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->things_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->things(static_cast<int>(i)));
    }
  }

  // optional int64 upsid = 4;
  if (has_upsid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->upsid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AURequestPickup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AURequestPickup)
  GOOGLE_DCHECK_NE(&from, this);
  const AURequestPickup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AURequestPickup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AURequestPickup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AURequestPickup)
    MergeFrom(*source);
  }
}

void AURequestPickup::MergeFrom(const AURequestPickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AURequestPickup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  things_.MergeFrom(from.things_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_wareinfo()->::Warehouse::MergeFrom(from.wareinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      trackingnum_ = from.trackingnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      upsid_ = from.upsid_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AURequestPickup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AURequestPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AURequestPickup::CopyFrom(const AURequestPickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AURequestPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AURequestPickup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->things())) return false;
  if (has_wareinfo()) {
    if (!this->wareinfo_->IsInitialized()) return false;
  }
  return true;
}

void AURequestPickup::Swap(AURequestPickup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AURequestPickup::InternalSwap(AURequestPickup* other) {
  using std::swap;
  CastToBase(&things_)->InternalSwap(CastToBase(&other->things_));
  swap(wareinfo_, other->wareinfo_);
  swap(trackingnum_, other->trackingnum_);
  swap(upsid_, other->upsid_);
  swap(seqnum_, other->seqnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AURequestPickup::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UAArrived::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UAArrived::kTruckidFieldNumber;
const int UAArrived::kTrackingnumFieldNumber;
const int UAArrived::kSeqnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UAArrived::UAArrived()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_UAArrived.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UAArrived)
}
UAArrived::UAArrived(const UAArrived& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trackingnum_, &from.trackingnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UAArrived)
}

void UAArrived::SharedCtor() {
  ::memset(&trackingnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
}

UAArrived::~UAArrived() {
  // @@protoc_insertion_point(destructor:UAArrived)
  SharedDtor();
}

void UAArrived::SharedDtor() {
}

void UAArrived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UAArrived::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UAArrived& UAArrived::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_UAArrived.base);
  return *internal_default_instance();
}


void UAArrived::Clear() {
// @@protoc_insertion_point(message_clear_start:UAArrived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&trackingnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UAArrived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UAArrived)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 truckid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_truckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 trackingnum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_trackingnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trackingnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 seqnum = 255;
      case 255: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 2040 & 0xFF */)) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UAArrived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UAArrived)
  return false;
#undef DO_
}

void UAArrived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UAArrived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // required int64 trackingnum = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->trackingnum(), output);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(255, this->seqnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UAArrived)
}

::google::protobuf::uint8* UAArrived::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UAArrived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 truckid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // required int64 trackingnum = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->trackingnum(), target);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(255, this->seqnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAArrived)
  return target;
}

size_t UAArrived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UAArrived)
  size_t total_size = 0;

  if (has_trackingnum()) {
    // required int64 trackingnum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trackingnum());
  }

  if (has_truckid()) {
    // required int32 truckid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());
  }

  if (has_seqnum()) {
    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());
  }

  return total_size;
}
size_t UAArrived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAArrived)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 trackingnum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trackingnum());

    // required int32 truckid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());

    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UAArrived::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UAArrived)
  GOOGLE_DCHECK_NE(&from, this);
  const UAArrived* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UAArrived>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UAArrived)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UAArrived)
    MergeFrom(*source);
  }
}

void UAArrived::MergeFrom(const UAArrived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAArrived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      trackingnum_ = from.trackingnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UAArrived::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UAArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UAArrived::CopyFrom(const UAArrived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAArrived::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UAArrived::Swap(UAArrived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UAArrived::InternalSwap(UAArrived* other) {
  using std::swap;
  swap(trackingnum_, other->trackingnum_);
  swap(truckid_, other->truckid_);
  swap(seqnum_, other->seqnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UAArrived::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AULoadOver::InitAsDefaultInstance() {
  ::_AULoadOver_default_instance_._instance.get_mutable()->loc_ = const_cast< ::UDeliveryLocation*>(
      ::UDeliveryLocation::internal_default_instance());
}
void AULoadOver::clear_loc() {
  if (loc_ != NULL) loc_->Clear();
  clear_has_loc();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AULoadOver::kTrackingnumFieldNumber;
const int AULoadOver::kTruckidFieldNumber;
const int AULoadOver::kLocFieldNumber;
const int AULoadOver::kSeqnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AULoadOver::AULoadOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_AULoadOver.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AULoadOver)
}
AULoadOver::AULoadOver(const AULoadOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_loc()) {
    loc_ = new ::UDeliveryLocation(*from.loc_);
  } else {
    loc_ = NULL;
  }
  ::memcpy(&trackingnum_, &from.trackingnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AULoadOver)
}

void AULoadOver::SharedCtor() {
  ::memset(&loc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&loc_)) + sizeof(seqnum_));
}

AULoadOver::~AULoadOver() {
  // @@protoc_insertion_point(destructor:AULoadOver)
  SharedDtor();
}

void AULoadOver::SharedDtor() {
  if (this != internal_default_instance()) delete loc_;
}

void AULoadOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AULoadOver::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AULoadOver& AULoadOver::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_AULoadOver.base);
  return *internal_default_instance();
}


void AULoadOver::Clear() {
// @@protoc_insertion_point(message_clear_start:AULoadOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(loc_ != NULL);
    loc_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&trackingnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AULoadOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AULoadOver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 trackingnum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trackingnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trackingnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 truckid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_truckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .UDeliveryLocation loc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_loc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 seqnum = 255;
      case 255: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 2040 & 0xFF */)) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AULoadOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AULoadOver)
  return false;
#undef DO_
}

void AULoadOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AULoadOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 trackingnum = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->trackingnum(), output);
  }

  // required int32 truckid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->truckid(), output);
  }

  // required .UDeliveryLocation loc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_loc(), output);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(255, this->seqnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AULoadOver)
}

::google::protobuf::uint8* AULoadOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AULoadOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 trackingnum = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->trackingnum(), target);
  }

  // required int32 truckid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->truckid(), target);
  }

  // required .UDeliveryLocation loc = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_loc(), deterministic, target);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(255, this->seqnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AULoadOver)
  return target;
}

size_t AULoadOver::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AULoadOver)
  size_t total_size = 0;

  if (has_loc()) {
    // required .UDeliveryLocation loc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *loc_);
  }

  if (has_trackingnum()) {
    // required int64 trackingnum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trackingnum());
  }

  if (has_truckid()) {
    // required int32 truckid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());
  }

  if (has_seqnum()) {
    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());
  }

  return total_size;
}
size_t AULoadOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AULoadOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .UDeliveryLocation loc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *loc_);

    // required int64 trackingnum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trackingnum());

    // required int32 truckid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->truckid());

    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AULoadOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AULoadOver)
  GOOGLE_DCHECK_NE(&from, this);
  const AULoadOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AULoadOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AULoadOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AULoadOver)
    MergeFrom(*source);
  }
}

void AULoadOver::MergeFrom(const AULoadOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AULoadOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_loc()->::UDeliveryLocation::MergeFrom(from.loc());
    }
    if (cached_has_bits & 0x00000002u) {
      trackingnum_ = from.trackingnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AULoadOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AULoadOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AULoadOver::CopyFrom(const AULoadOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AULoadOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AULoadOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_loc()) {
    if (!this->loc_->IsInitialized()) return false;
  }
  return true;
}

void AULoadOver::Swap(AULoadOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AULoadOver::InternalSwap(AULoadOver* other) {
  using std::swap;
  swap(loc_, other->loc_);
  swap(trackingnum_, other->trackingnum_);
  swap(truckid_, other->truckid_);
  swap(seqnum_, other->seqnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AULoadOver::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UADeliverOver::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UADeliverOver::kTrackingnumFieldNumber;
const int UADeliverOver::kSeqnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UADeliverOver::UADeliverOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_UADeliverOver.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UADeliverOver)
}
UADeliverOver::UADeliverOver(const UADeliverOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trackingnum_, &from.trackingnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UADeliverOver)
}

void UADeliverOver::SharedCtor() {
  ::memset(&trackingnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
}

UADeliverOver::~UADeliverOver() {
  // @@protoc_insertion_point(destructor:UADeliverOver)
  SharedDtor();
}

void UADeliverOver::SharedDtor() {
}

void UADeliverOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UADeliverOver::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UADeliverOver& UADeliverOver::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_UADeliverOver.base);
  return *internal_default_instance();
}


void UADeliverOver::Clear() {
// @@protoc_insertion_point(message_clear_start:UADeliverOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&trackingnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&trackingnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UADeliverOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UADeliverOver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 trackingnum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_trackingnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trackingnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 seqnum = 255;
      case 255: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 2040 & 0xFF */)) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UADeliverOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UADeliverOver)
  return false;
#undef DO_
}

void UADeliverOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UADeliverOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 trackingnum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->trackingnum(), output);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(255, this->seqnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UADeliverOver)
}

::google::protobuf::uint8* UADeliverOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UADeliverOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 trackingnum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->trackingnum(), target);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(255, this->seqnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UADeliverOver)
  return target;
}

size_t UADeliverOver::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UADeliverOver)
  size_t total_size = 0;

  if (has_trackingnum()) {
    // required int64 trackingnum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trackingnum());
  }

  if (has_seqnum()) {
    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());
  }

  return total_size;
}
size_t UADeliverOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UADeliverOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 trackingnum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trackingnum());

    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UADeliverOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UADeliverOver)
  GOOGLE_DCHECK_NE(&from, this);
  const UADeliverOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UADeliverOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UADeliverOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UADeliverOver)
    MergeFrom(*source);
  }
}

void UADeliverOver::MergeFrom(const UADeliverOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UADeliverOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      trackingnum_ = from.trackingnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UADeliverOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UADeliverOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UADeliverOver::CopyFrom(const UADeliverOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UADeliverOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UADeliverOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UADeliverOver::Swap(UADeliverOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UADeliverOver::InternalSwap(UADeliverOver* other) {
  using std::swap;
  swap(trackingnum_, other->trackingnum_);
  swap(seqnum_, other->seqnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UADeliverOver::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AUCommand::InitAsDefaultInstance() {
  ::_AUCommand_default_instance_._instance.get_mutable()->queryupsid_ = const_cast< ::AUQueryUpsid*>(
      ::AUQueryUpsid::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AUCommand::kPickupFieldNumber;
const int AUCommand::kPackloadedFieldNumber;
const int AUCommand::kQueryupsidFieldNumber;
const int AUCommand::kErrorsFieldNumber;
const int AUCommand::kAcksFieldNumber;
const int AUCommand::kSeqnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AUCommand::AUCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_AUCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AUCommand)
}
AUCommand::AUCommand(const AUCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pickup_(from.pickup_),
      packloaded_(from.packloaded_),
      errors_(from.errors_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_queryupsid()) {
    queryupsid_ = new ::AUQueryUpsid(*from.queryupsid_);
  } else {
    queryupsid_ = NULL;
  }
  seqnum_ = from.seqnum_;
  // @@protoc_insertion_point(copy_constructor:AUCommand)
}

void AUCommand::SharedCtor() {
  ::memset(&queryupsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&queryupsid_)) + sizeof(seqnum_));
}

AUCommand::~AUCommand() {
  // @@protoc_insertion_point(destructor:AUCommand)
  SharedDtor();
}

void AUCommand::SharedDtor() {
  if (this != internal_default_instance()) delete queryupsid_;
}

void AUCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AUCommand::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AUCommand& AUCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_AUCommand.base);
  return *internal_default_instance();
}


void AUCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:AUCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pickup_.Clear();
  packloaded_.Clear();
  errors_.Clear();
  acks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(queryupsid_ != NULL);
    queryupsid_->Clear();
  }
  seqnum_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AUCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AUCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AURequestPickup pickup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pickup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AULoadOver packloaded = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_packloaded()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AUQueryUpsid queryupsid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_queryupsid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Err errors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 acks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40u, input, this->mutable_acks())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_acks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 seqnum = 255;
      case 255: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 2040 & 0xFF */)) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AUCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AUCommand)
  return false;
#undef DO_
}

void AUCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AUCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AURequestPickup pickup = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pickup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pickup(static_cast<int>(i)),
      output);
  }

  // repeated .AULoadOver packloaded = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packloaded_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->packloaded(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .AUQueryUpsid queryupsid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_queryupsid(), output);
  }

  // repeated .Err errors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->errors(static_cast<int>(i)),
      output);
  }

  // repeated int64 acks = 5;
  for (int i = 0, n = this->acks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->acks(i), output);
  }

  // optional int64 seqnum = 255;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(255, this->seqnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AUCommand)
}

::google::protobuf::uint8* AUCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AUCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AURequestPickup pickup = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pickup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pickup(static_cast<int>(i)), deterministic, target);
  }

  // repeated .AULoadOver packloaded = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packloaded_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->packloaded(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .AUQueryUpsid queryupsid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_queryupsid(), deterministic, target);
  }

  // repeated .Err errors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->errors(static_cast<int>(i)), deterministic, target);
  }

  // repeated int64 acks = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(5, this->acks_, target);

  // optional int64 seqnum = 255;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(255, this->seqnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUCommand)
  return target;
}

size_t AUCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .AURequestPickup pickup = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pickup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pickup(static_cast<int>(i)));
    }
  }

  // repeated .AULoadOver packloaded = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->packloaded_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->packloaded(static_cast<int>(i)));
    }
  }

  // repeated .Err errors = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // repeated int64 acks = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->acks_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .AUQueryUpsid queryupsid = 3;
    if (has_queryupsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *queryupsid_);
    }

    // optional int64 seqnum = 255;
    if (has_seqnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seqnum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AUCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AUCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AUCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AUCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AUCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AUCommand)
    MergeFrom(*source);
  }
}

void AUCommand::MergeFrom(const AUCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pickup_.MergeFrom(from.pickup_);
  packloaded_.MergeFrom(from.packloaded_);
  errors_.MergeFrom(from.errors_);
  acks_.MergeFrom(from.acks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_queryupsid()->::AUQueryUpsid::MergeFrom(from.queryupsid());
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AUCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AUCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AUCommand::CopyFrom(const AUCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUCommand::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pickup())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->packloaded())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->errors())) return false;
  if (has_queryupsid()) {
    if (!this->queryupsid_->IsInitialized()) return false;
  }
  return true;
}

void AUCommand::Swap(AUCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AUCommand::InternalSwap(AUCommand* other) {
  using std::swap;
  CastToBase(&pickup_)->InternalSwap(CastToBase(&other->pickup_));
  CastToBase(&packloaded_)->InternalSwap(CastToBase(&other->packloaded_));
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  acks_.InternalSwap(&other->acks_);
  swap(queryupsid_, other->queryupsid_);
  swap(seqnum_, other->seqnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AUCommand::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UACommand::InitAsDefaultInstance() {
  ::_UACommand_default_instance_._instance.get_mutable()->sendid_ = const_cast< ::UASendWorldId*>(
      ::UASendWorldId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UACommand::kSendidFieldNumber;
const int UACommand::kArrivedFieldNumber;
const int UACommand::kDeliveroverFieldNumber;
const int UACommand::kErrorsFieldNumber;
const int UACommand::kAcksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UACommand::UACommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_UACommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UACommand)
}
UACommand::UACommand(const UACommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      arrived_(from.arrived_),
      deliverover_(from.deliverover_),
      errors_(from.errors_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sendid()) {
    sendid_ = new ::UASendWorldId(*from.sendid_);
  } else {
    sendid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:UACommand)
}

void UACommand::SharedCtor() {
  sendid_ = NULL;
}

UACommand::~UACommand() {
  // @@protoc_insertion_point(destructor:UACommand)
  SharedDtor();
}

void UACommand::SharedDtor() {
  if (this != internal_default_instance()) delete sendid_;
}

void UACommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UACommand::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UACommand& UACommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_UACommand.base);
  return *internal_default_instance();
}


void UACommand::Clear() {
// @@protoc_insertion_point(message_clear_start:UACommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrived_.Clear();
  deliverover_.Clear();
  errors_.Clear();
  acks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sendid_ != NULL);
    sendid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UACommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UACommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UASendWorldId sendid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sendid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UAArrived arrived = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_arrived()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UADeliverOver deliverover = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deliverover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Err errors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 acks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40u, input, this->mutable_acks())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_acks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UACommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UACommand)
  return false;
#undef DO_
}

void UACommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UACommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .UASendWorldId sendid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sendid(), output);
  }

  // repeated .UAArrived arrived = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arrived_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->arrived(static_cast<int>(i)),
      output);
  }

  // repeated .UADeliverOver deliverover = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deliverover_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->deliverover(static_cast<int>(i)),
      output);
  }

  // repeated .Err errors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->errors(static_cast<int>(i)),
      output);
  }

  // repeated int64 acks = 5;
  for (int i = 0, n = this->acks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->acks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UACommand)
}

::google::protobuf::uint8* UACommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UACommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .UASendWorldId sendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sendid(), deterministic, target);
  }

  // repeated .UAArrived arrived = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arrived_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->arrived(static_cast<int>(i)), deterministic, target);
  }

  // repeated .UADeliverOver deliverover = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deliverover_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->deliverover(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Err errors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->errors(static_cast<int>(i)), deterministic, target);
  }

  // repeated int64 acks = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(5, this->acks_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UACommand)
  return target;
}

size_t UACommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UACommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .UAArrived arrived = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->arrived_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->arrived(static_cast<int>(i)));
    }
  }

  // repeated .UADeliverOver deliverover = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->deliverover_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deliverover(static_cast<int>(i)));
    }
  }

  // repeated .Err errors = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // repeated int64 acks = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->acks_size());
    total_size += data_size;
  }

  // optional .UASendWorldId sendid = 1;
  if (has_sendid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sendid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UACommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UACommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UACommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UACommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UACommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UACommand)
    MergeFrom(*source);
  }
}

void UACommand::MergeFrom(const UACommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UACommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arrived_.MergeFrom(from.arrived_);
  deliverover_.MergeFrom(from.deliverover_);
  errors_.MergeFrom(from.errors_);
  acks_.MergeFrom(from.acks_);
  if (from.has_sendid()) {
    mutable_sendid()->::UASendWorldId::MergeFrom(from.sendid());
  }
}

void UACommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UACommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UACommand::CopyFrom(const UACommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UACommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UACommand::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->arrived())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->deliverover())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->errors())) return false;
  if (has_sendid()) {
    if (!this->sendid_->IsInitialized()) return false;
  }
  return true;
}

void UACommand::Swap(UACommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UACommand::InternalSwap(UACommand* other) {
  using std::swap;
  CastToBase(&arrived_)->InternalSwap(CastToBase(&other->arrived_));
  CastToBase(&deliverover_)->InternalSwap(CastToBase(&other->deliverover_));
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  acks_.InternalSwap(&other->acks_);
  swap(sendid_, other->sendid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UACommand::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Err::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Err::kErrFieldNumber;
const int Err::kOriginseqnumFieldNumber;
const int Err::kSeqnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Err::Err()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ups_5famazon_2eproto::scc_info_Err.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Err)
}
Err::Err(const Err& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_err()) {
    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  ::memcpy(&originseqnum_, &from.originseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:Err)
}

void Err::SharedCtor() {
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&originseqnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
}

Err::~Err() {
  // @@protoc_insertion_point(destructor:Err)
  SharedDtor();
}

void Err::SharedDtor() {
  err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Err::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Err::descriptor() {
  ::protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Err& Err::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ups_5famazon_2eproto::scc_info_Err.base);
  return *internal_default_instance();
}


void Err::Clear() {
// @@protoc_insertion_point(message_clear_start:Err)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    err_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&originseqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Err::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Err)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->err().data(), static_cast<int>(this->err().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Err.err");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 originseqnum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_originseqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &originseqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 seqnum = 255;
      case 255: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 2040 & 0xFF */)) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Err)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Err)
  return false;
#undef DO_
}

void Err::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Err)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string err = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err().data(), static_cast<int>(this->err().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Err.err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->err(), output);
  }

  // required int64 originseqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->originseqnum(), output);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(255, this->seqnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Err)
}

::google::protobuf::uint8* Err::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Err)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string err = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err().data(), static_cast<int>(this->err().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Err.err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->err(), target);
  }

  // required int64 originseqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->originseqnum(), target);
  }

  // required int64 seqnum = 255;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(255, this->seqnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Err)
  return target;
}

size_t Err::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Err)
  size_t total_size = 0;

  if (has_err()) {
    // required string err = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err());
  }

  if (has_originseqnum()) {
    // required int64 originseqnum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->originseqnum());
  }

  if (has_seqnum()) {
    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());
  }

  return total_size;
}
size_t Err::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Err)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string err = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err());

    // required int64 originseqnum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->originseqnum());

    // required int64 seqnum = 255;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Err::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Err)
  GOOGLE_DCHECK_NE(&from, this);
  const Err* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Err>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Err)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Err)
    MergeFrom(*source);
  }
}

void Err::MergeFrom(const Err& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Err)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_err();
      err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
    }
    if (cached_has_bits & 0x00000002u) {
      originseqnum_ = from.originseqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Err::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Err)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Err::CopyFrom(const Err& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Err)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Err::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Err::Swap(Err* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Err::InternalSwap(Err* other) {
  using std::swap;
  err_.Swap(&other->err_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(originseqnum_, other->originseqnum_);
  swap(seqnum_, other->seqnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Err::GetMetadata() const {
  protobuf_ups_5famazon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ups_5famazon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UASendWorldId* Arena::CreateMaybeMessage< ::UASendWorldId >(Arena* arena) {
  return Arena::CreateInternal< ::UASendWorldId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AUQueryUpsid* Arena::CreateMaybeMessage< ::AUQueryUpsid >(Arena* arena) {
  return Arena::CreateInternal< ::AUQueryUpsid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Warehouse* Arena::CreateMaybeMessage< ::Warehouse >(Arena* arena) {
  return Arena::CreateInternal< ::Warehouse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AURequestPickup* Arena::CreateMaybeMessage< ::AURequestPickup >(Arena* arena) {
  return Arena::CreateInternal< ::AURequestPickup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UAArrived* Arena::CreateMaybeMessage< ::UAArrived >(Arena* arena) {
  return Arena::CreateInternal< ::UAArrived >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AULoadOver* Arena::CreateMaybeMessage< ::AULoadOver >(Arena* arena) {
  return Arena::CreateInternal< ::AULoadOver >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UADeliverOver* Arena::CreateMaybeMessage< ::UADeliverOver >(Arena* arena) {
  return Arena::CreateInternal< ::UADeliverOver >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AUCommand* Arena::CreateMaybeMessage< ::AUCommand >(Arena* arena) {
  return Arena::CreateInternal< ::AUCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UACommand* Arena::CreateMaybeMessage< ::UACommand >(Arena* arena) {
  return Arena::CreateInternal< ::UACommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Err* Arena::CreateMaybeMessage< ::Err >(Arena* arena) {
  return Arena::CreateInternal< ::Err >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
